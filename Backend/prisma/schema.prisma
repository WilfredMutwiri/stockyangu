// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(SELLER)

  shop   Shop? @relation(fields: [shopId], references: [id])
  shopId Int?

  productMovements ProductMovement[]
  notifications    Notification[]

  invitesSent     Invite[] @relation("InviteSender")
  invitesReceived Invite[] @relation("InviteRecipient")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  SYS_ADMIN

  SELLER
  MANAGER
}

model Shop {
  id       Int          @id @default(autoincrement())
  name     String
  phone    String
  email    String
  website  String?
  logoUrl  String?
  category ShopCategory

  workers  User[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  imageUrl    String?
  description String?

  priceHistory Price[]
  movements    ProductMovement[]

  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id Int @id @default(autoincrement())

  buying  Float
  selling Float

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  startDate DateTime  @default(now()) // When the price started being in effect
  endDate   DateTime? // Nullable, tracks when the price stops being in effect

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  productMovement ProductMovement[]
}

model ProductMovement {
  id       Int @id @default(autoincrement())
  quantity Int

  priceInEffect  Price @relation(fields: [productPriceId], references: [id])
  productPriceId Int

  // who did the movement
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String

  type      MovementType
  product   Product      @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Notification {
  id Int @id @default(autoincrement())

  title   String
  message String
  read    Boolean @default(false)

  type NotificationType

  action NotificationAction //don't add a default value here to prevent accidentally failing to handle the action

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Invite {
  id Int @id @default(autoincrement())

  sender   User   @relation("InviteSender", fields: [senderId], references: [id])
  senderId String

  recipient   User   @relation("InviteRecipient", fields: [recipientId], references: [id])
  recipientId String

  status InviteStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  Info
  Warning
  Success
  Error
}

enum NotificationAction {
  NO_ACTION
  VIEW_INVITES
  VIEW_SHOP
}

enum MovementType {
  IN
  OUT
}

enum ShopCategory {
  GROCERY
  RESTAURANT
  PHARMACY
  CLOTHING
  ELECTRONICS
  FURNITURE
  BEAUTY
  BOOKS
  SERVICE
  OTHER
}
